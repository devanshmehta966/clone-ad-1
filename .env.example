# =============================================================================
# MARKETING DASHBOARD - ENVIRONMENT CONFIGURATION
# =============================================================================
# Copy this file to .env.local and fill in your actual values
# Never commit .env.local to version control!

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL database connection string
# Format: postgresql://username:password@host:port/database_name
# Development: Use Docker Compose database (yarn db:start)
# Production: Use managed PostgreSQL service (AWS RDS, Google Cloud SQL, etc.)
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/marketing_dashboard"

# =============================================================================
# NEXTAUTH.JS AUTHENTICATION
# =============================================================================
# The canonical URL of your site (used for OAuth callbacks)
# Development: http://localhost:3000
# Production: https://yourdomain.com
NEXTAUTH_URL="http://localhost:3000"

# Secret used to encrypt JWT tokens and session data
# REQUIRED: Must be at least 32 characters long
# Generate with: openssl rand -base64 32
# Or use: https://generate-secret.vercel.app/32
NEXTAUTH_SECRET="your-secret-key-here-minimum-32-characters-long"

# =============================================================================
# OAUTH PROVIDERS - AUTHENTICATION
# =============================================================================
# These are used for user authentication (Sign in with Google/Facebook/LinkedIn)

# Google OAuth (Google Cloud Console)
# 1. Go to https://console.cloud.google.com/
# 2. Create project or select existing
# 3. Enable Google+ API
# 4. Create OAuth 2.0 credentials
# 5. Add redirect URI: {NEXTAUTH_URL}/api/auth/callback/google
GOOGLE_CLIENT_ID="your-google-client-id"
GOOGLE_CLIENT_SECRET="your-google-client-secret"

# Facebook OAuth (Facebook Developers)
# 1. Go to https://developers.facebook.com/
# 2. Create new app
# 3. Add Facebook Login product
# 4. Add redirect URI: {NEXTAUTH_URL}/api/auth/callback/facebook
FACEBOOK_CLIENT_ID="your-facebook-client-id"
FACEBOOK_CLIENT_SECRET="your-facebook-client-secret"

# LinkedIn OAuth (LinkedIn Developers)
# 1. Go to https://www.linkedin.com/developers/
# 2. Create new app
# 3. Add Sign In with LinkedIn product
# 4. Add redirect URI: {NEXTAUTH_URL}/api/auth/callback/linkedin
LINKEDIN_CLIENT_ID="your-linkedin-client-id"
LINKEDIN_CLIENT_SECRET="your-linkedin-client-secret"

# =============================================================================
# ADVERTISING PLATFORM API CREDENTIALS
# =============================================================================
# These are used for data integration with advertising platforms

# Google Ads API
# 1. Go to https://console.cloud.google.com/
# 2. Enable Google Ads API
# 3. Create OAuth 2.0 credentials
# 4. Apply for developer token: https://developers.google.com/google-ads/api/docs/first-call/dev-token
GOOGLE_ADS_CLIENT_ID="your-google-ads-client-id"
GOOGLE_ADS_CLIENT_SECRET="your-google-ads-client-secret"
GOOGLE_ADS_DEVELOPER_TOKEN="your-google-ads-developer-token"

# Meta (Facebook) Ads API
# 1. Go to https://developers.facebook.com/
# 2. Create business app
# 3. Add Marketing API product
# 4. Get app review for ads_read permission
META_APP_ID="your-meta-app-id"
META_APP_SECRET="your-meta-app-secret"

# LinkedIn Ads API
# 1. Go to https://www.linkedin.com/developers/
# 2. Create new app
# 3. Add LinkedIn Marketing Developer Platform product
# 4. Apply for Marketing API access
LINKEDIN_ADS_CLIENT_ID="your-linkedin-ads-client-id"
LINKEDIN_ADS_CLIENT_SECRET="your-linkedin-ads-client-secret"

# Google Analytics API
# 1. Go to https://console.cloud.google.com/
# 2. Enable Google Analytics Reporting API
# 3. Create OAuth 2.0 credentials
GOOGLE_ANALYTICS_CLIENT_ID="your-google-analytics-client-id"
GOOGLE_ANALYTICS_CLIENT_SECRET="your-google-analytics-client-secret"

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Encryption key for storing sensitive OAuth tokens in database
# REQUIRED: Must be exactly 32 characters long
# Generate with: openssl rand -hex 16
ENCRYPTION_KEY="your-32-character-encryption-key-here"

# Allowed origins for CORS (comma-separated)
# Include all domains that will access your API
ALLOWED_ORIGINS="http://localhost:3000,https://yourdomain.com"

# =============================================================================
# CACHING AND PERFORMANCE (OPTIONAL)
# =============================================================================
# Redis URL for caching and rate limiting
# Development: Use Docker Compose Redis (included in docker-compose.yml)
# Production: Use managed Redis service (AWS ElastiCache, Google Memorystore, etc.)
# Leave empty to use in-memory caching (not recommended for production)
REDIS_URL="redis://localhost:6379"

# =============================================================================
# MONITORING AND LOGGING (OPTIONAL)
# =============================================================================
# Sentry DSN for error monitoring
# SENTRY_DSN="https://your-sentry-dsn@sentry.io/project-id"

# Log level (error, warn, info, debug)
LOG_LEVEL="info"

# =============================================================================
# STRIPE BILLING (OPTIONAL — ENABLE TO USE MANAGE SUBSCRIPTION)
# =============================================================================
# If you want the "Manage Subscription" button to open the real Stripe Customer
# Portal, configure the following:
# 1) Install Stripe SDK in the project: yarn add stripe
# 2) Set STRIPE_SECRET_KEY to your Stripe secret key (starts with sk_...)
# 3) Set NEXT_PUBLIC_APP_URL to your app URL (used as return_url)
# 4) Provide a demo/test customer ID or load from your DB per user
# 5) (Optional) For webhooks, set STRIPE_WEBHOOK_SECRET
STRIPE_SECRET_KEY="sk_test_51SASnUSj8GKoglAnMRWXUH9zwmai8QKQegCyctwJMo95vxhrXnC4KZkulK0eB2g1rKkDwiOWuSohq7LGtt67I7wn00dXiNoqC4"
STRIPE_PUBLIC_KEY="pk_test_51SASnUSj8GKoglAn2bC07nRrsnxFKAPsKfppjlqoz4NblpT7B0JTR1xPe5vvAGIuccwrRKFzSXaEPu9vQKMGkLXK00PQ0R8Pwo"
NEXT_PUBLIC_APP_URL="http://localhost:3000"
# For demo/testing only. In production, use a per-user customer ID from your DB
DEMO_STRIPE_CUSTOMER_ID="cus_1234567890"
# For webhook verification when using /api/stripe/webhook
# Obtain via: stripe listen --forward-to localhost:3000/api/stripe/webhook
STRIPE_WEBHOOK_SECRET="whsec_1TLpTv5zu4roqqwg3ISE0l9NYNQlZrcU"

# Stripe Price IDs for Checkout (create in Stripe Dashboard → Products)
# Example: price_1NxyzABC...
STRIPE_PRICE_BASIC="price_basic_monthly_id"
STRIPE_PRICE_PRO="price_pro_monthly_id"
STRIPE_PRICE_BUSINESS="price_business_monthly_id"

# Optional email relay endpoint for Alerts → Webhook (provider=email)
# Example: your serverless function or email provider hook (e.g., SendGrid)
EMAIL_WEBHOOK_URL="https://your-email-relay.example.com/api/email"

# =============================================================================
# PRODUCTION ENVIRONMENT VARIABLES
# =============================================================================
# These should only be set in production

# Environment (development, staging, production)
NODE_ENV="development"

# Database connection pool settings (production only)
# DATABASE_POOL_MIN=2
# DATABASE_POOL_MAX=10

# Security headers configuration (production only)
# CSP_REPORT_URI="https://your-csp-report-endpoint.com/report"
# HSTS_MAX_AGE="31536000"

# SSL/TLS configuration (production only)
# SSL_CERT_PATH="/path/to/ssl/cert.pem"
# SSL_KEY_PATH="/path/to/ssl/key.pem"

# =============================================================================
# DOCKER COMPOSE VARIABLES
# =============================================================================
# These are used by docker-compose.prod.yml

# PostgreSQL configuration
POSTGRES_DB="marketing_dashboard"
POSTGRES_USER="postgres"
POSTGRES_PASSWORD="your-secure-postgres-password"

# =============================================================================
# DEPLOYMENT PLATFORM SPECIFIC
# =============================================================================

# Vercel (if deploying to Vercel)
# VERCEL_URL is automatically set by Vercel
# VERCEL_ENV is automatically set by Vercel

# AWS (if deploying to AWS)
# AWS_REGION="us-east-1"
# AWS_ACCESS_KEY_ID="your-aws-access-key"
# AWS_SECRET_ACCESS_KEY="your-aws-secret-key"

# Google Cloud (if deploying to Google Cloud)
# GOOGLE_CLOUD_PROJECT="your-project-id"
# GOOGLE_APPLICATION_CREDENTIALS="/path/to/service-account.json"

# =============================================================================
# DEVELOPMENT ONLY
# =============================================================================
# These should only be used in development

# Enable debug logging
# DEBUG="true"

# Disable telemetry
# NEXT_TELEMETRY_DISABLED="1"

# Enable experimental features
# NEXT_EXPERIMENTAL_APP_DIR="true"