// Customer database schema for authentication
// This schema is used for user authentication, sign-in, and sign-up

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/customer-client"
}

datasource db {
  provider = "postgresql"
  url      = env("CUSTOMER_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String?   // For credential auth
  image         String?
  role          Role      @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  profile      Profile?

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  fullName        String?
  email           String?
  avatarUrl       String?
  businessName    String?
  businessEmail   String?
  businessPhone   String?
  businessWebsite String?
  subscriptionPlan String?
  
  // Notification preferences
  emailAlerts     Boolean  @default(true)
  weeklyReports   Boolean  @default(true)
  budgetAlerts    Boolean  @default(true)
  performanceAlerts Boolean @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// Enums
enum Role {
  ADMIN
  CLIENT
}
